/* Equivalent to groupid and version in maven, artifactid is set in settings.gradle.  */
group 'com.szadowsz'
version '0.1-ALPHA'

/* Standard plugins documentation is available here https://docs.gradle.org/current/userguide/standard_plugins.html. */

/* Language plugins to aid in compilation of target languages, probably best to be explicit here.*/
apply plugin: 'java'
apply plugin: 'scala'

// IntelliJ is the primary development medium, so it makes sense to add explicit support for all the sub-modules
apply plugin: 'idea'

//idea {
//    module {
//        downloavadoc = true
//        downloadSources = true
//    }
//}

/*
 * Specifying the versions as extra variables here so that they can be reused across multiple dependencies. Note you
 * can add a '+' in the version info instead of a major/minor version to get the latest relevant version of the jar.
 */
ext {
    scalaVersion = '2.11.8'
    sparkVersion = '2.0.1'
    scalaTestVersion = '2.2.4'
    slf4jVersion = '1.7.12'
    junitVersion = '4.11'
    seleniumVersion = '2.52.0'
}

/* The Repositories to pull the dependencies from. Can include local jars. */
repositories {
    mavenCentral()
}

/*
 * Dependencies of the current system. Important dependencies for interops between scala and java are: scala compiler,
 * slf4j logger, scalatest and junit.
 */
dependencies {
    compile project(':module/phobail')
    compile group: 'org.scala-lang', name: 'scala-compiler', version: scalaVersion

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'

    compile group: 'org.apache.spark', name: 'spark-core_2.11', version: sparkVersion
    compile group: 'org.apache.spark', name: 'spark-mllib_2.11', version: sparkVersion

    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: slf4jVersion

    testCompile group: 'org.scalatest', name: 'scalatest_2.11', version: scalaTestVersion
    testCompile group: 'junit', name: 'junit', version: junitVersion
}

task unzip1901Census {
    fileTree(dir: 'archives/census/ireland/1901/').include('*.zip').each { census ->
        copy {
            println "Unzip $census.name"
            from zipTree("archives/census/ireland/1901/${census.name}")
            into "data/census/ireland/1901/"
        }
    }
}

task unzipDictionary(type: Copy) {
    def zipFile = file('archives/dict.zip')
    def outputDir = file("data/dict")
    from zipTree(zipFile)
    into outputDir
}

task unzipFirstnames(type: Copy) {
    def zipFile = file('archives/firstnames.zip')
    def outputDir = file("data/firstnames")
    from zipTree(zipFile)
    into outputDir
}

task unzipSurnames(type: Copy) {
    def zipFile = file('archives/surnames.zip')
    def outputDir = file("data/surnames")
    from zipTree(zipFile)
    into outputDir
}

task zipDictionary(type: Zip) {
    from "data/dict"
    destinationDir file("archives/")
    archiveName "dict.zip"
}