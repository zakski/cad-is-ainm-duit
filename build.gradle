/* Equivalent to groupid and version in maven, artifactid is set in settings.gradle.  */
group 'com.szadowsz'
version '0.1-ALPHA'

/* Standard plugins documentation is available here https://docs.gradle.org/current/userguide/standard_plugins.html. */

// IntelliJ is the primary development medium, so it makes sense to add explicit support for all the sub-modules
apply plugin: 'idea'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

/*
 * Specifying the versions as extra variables here so that they can be reused across multiple dependencies. Note you
 * can add a '+' in the version info instead of a major/minor version to get the latest relevant version of the jar.
 */
allprojects {
    ext {
        scalaVersion = '2.11.11'
        scalaTestVersion = '2.2.4'
        sparkVersion = '2.3.0-SNAPSHOT'
        slf4jVersion = '1.7.12'
        junitVersion = '4.11'
        seleniumVersion = '2.52.0'
        superCsvVersion = '2.3.1'
    }

    /* The Repositories to pull the dependencies from. Can include local jars. */
    repositories {
        mavenCentral()
        maven {
            url 'http://dl.bintray.com/zakski/default'
        }
        maven {
            url 'https://repository.apache.org/content/repositories/snapshots/'
        }
    }
}

task unZipResources() {
    fileTree(dir: 'archives')/*.include('*.zip')*/.each { dataFile ->
        if (dataFile.name.endsWith(".zip")) {
            copy {
                def parent = dataFile.getParent()
                def relative = parent.substring(parent.indexOf(rootDir.path) + rootDir.path.length() + 1)
                def target = relative.substring("archives\\".length())
                def name = dataFile.name - '.zip'

                println "Unzipping ${dataFile.name} From ${relative} To data/$target/$name"

                from zipTree(dataFile.path)
                into "data/$target/$name"
            }
        } else if (dataFile.name.endsWith(".csv")) {
            copy {
                def parent = dataFile.getParent()
                def relative = parent.substring(parent.indexOf(rootDir.path) + rootDir.path.length() + 1)
                def target = relative.substring("archives\\".length())
                from fileTree(dataFile.path)
                into "data/$target/"
            }
        }
    }
}