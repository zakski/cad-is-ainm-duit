/* Equivalent to groupid and version in maven, artifactid is set in settings.gradle.  */
group 'com.szadowsz'
version '0.1-ALPHA'

/* Standard plugins documentation is available here https://docs.gradle.org/current/userguide/standard_plugins.html. */

/* Language plugins to aid in compilation of target languages, probably best to be explicit here.*/
apply plugin: 'java'
apply plugin: 'scala'

// IntelliJ is the primary development medium, so it makes sense to add explicit support for all the sub-modules
apply plugin: 'idea'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

/*
 * Specifying the versions as extra variables here so that they can be reused across multiple dependencies. Note you
 * can add a '+' in the version info instead of a major/minor version to get the latest relevant version of the jar.
 */
allprojects {
    ext {
        scalaVersion = '2.11.8'
        scalaTestVersion = '2.2.4'
        sparkVersion = '2.0.2'
        slf4jVersion = '1.7.12'
        junitVersion = '4.11'
        seleniumVersion = '2.52.0'
        superCsvVersion = '2.3.1'
    }

    /* The Repositories to pull the dependencies from. Can include local jars. */
    repositories {
        mavenCentral()
        maven {
            url 'http://dl.bintray.com/zakski/default'
        }
    }
}


/*
 * Dependencies of the current system. Important dependencies for interops between scala and java are: scala compiler,
 * slf4j logger, scalatest and junit.
 */
dependencies {
    compile group: 'com.szadowsz', name: 'an-phobail', version: '0.0.2'
    compile project(':module/ulster')

    compile group: 'org.scala-lang', name: 'scala-compiler', version: scalaVersion

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'

    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: slf4jVersion

    testCompile group: 'org.scalatest', name: 'scalatest_2.11', version: scalaTestVersion
    testCompile group: 'junit', name: 'junit', version: junitVersion

    compile group: 'net.sf.extjwnl', name: 'extjwnl', version: '1.9.2'
    compile group: 'net.sf.extjwnl', name: 'extjwnl-data-wn31', version: '1.2'

}

task unzip1901_1(type: Copy) {
    def zipFile = file('archives/data/census/ireland/1901/1901-1.zip')
    def outputDir = file("data/census/ireland/1901")
    from zipTree(zipFile)
    into outputDir
}

task unzip1901_2(type: Copy) {
    def zipFile = file('archives/data/census/ireland/1901/1901-2.zip')
    def outputDir = file("data/census/ireland/1901")
    from zipTree(zipFile)
    into outputDir
}

task unzip1901_3(type: Copy) {
    def zipFile = file('archives/data/census/ireland/1901/1901-3.zip')
    def outputDir = file("data/census/ireland/1901")
    from zipTree(zipFile)
    into outputDir
}

task unzip1901_4(type: Copy) {
    def zipFile = file('archives/data/census/ireland/1901/1901-4.zip')
    def outputDir = file("data/census/ireland/1901")
    from zipTree(zipFile)
    into outputDir
}

task unzipDictionary(type: Copy) {
    def zipFile = file('archives/dict.zip')
    def outputDir = file("data/dict")
    from zipTree(zipFile)
    into outputDir
}

task unzipFirstnames(type: Copy) {
    def zipFile = file('archives/firstnames.zip')
    def outputDir = file("data/firstnames")
    from zipTree(zipFile)
    into outputDir
}

task unzipSurnames(type: Copy) {
    def zipFile = file('archives/surnames.zip')
    def outputDir = file("data/surnames")
    from zipTree(zipFile)
    into outputDir
}

task zipDictionary(type: Zip) {
    from "data/dict"
    destinationDir file("archives/")
    archiveName "dict.zip"
}